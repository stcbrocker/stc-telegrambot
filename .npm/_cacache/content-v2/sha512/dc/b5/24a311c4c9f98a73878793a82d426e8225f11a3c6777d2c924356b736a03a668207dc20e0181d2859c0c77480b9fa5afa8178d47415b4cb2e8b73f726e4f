{"_id":"http-proxy-response-rewrite","_rev":"1-eea1209dd49f2e30be55da3a1300b405","name":"http-proxy-response-rewrite","description":"Rewrite the response body from http-proxy.","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.1":{"name":"http-proxy-response-rewrite","version":"0.0.1","description":"Rewrite the response body from http-proxy.","main":"index.js","scripts":{"test":"mocha -R spec ./test/*.js"},"repository":{"type":"git","url":"git+https://github.com/saskodh/http-proxy-response-rewrite.git"},"keywords":["http-proxy","streaming","json"],"authors":["Sashe Klechkovski <sasko_dh@hotmail.com>","XianFa Lang <xianfalang@gmail.com>"],"license":"MIT","bugs":{"url":"https://github.com/saskodh/http-proxy-response-rewrite/issues"},"homepage":"https://github.com/saskodh/http-proxy-response-rewrite#readme","dependencies":{"bufferhelper":"^0.2.1","concat-stream":"^1.5.1"},"devDependencies":{"chai":"^3.5.0","http-proxy":"^1.13.3","mocha":"^2.5.3"},"gitHead":"56bdb76d8ee4510103ef71ff3dae296259a3a737","_id":"http-proxy-response-rewrite@0.0.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"sklechko","email":"sasko_dh@hotmail.com"},"dist":{"integrity":"sha512-smtaa2sKgiWrP9c9W+/MFzgjeh3A4zsQOLh1S3rp1NsmNYIVO07AlWUnhoUnMZIuxY6+3v7OS5NlDGX2I2DWBQ==","shasum":"d938609561d3dd057c427518185389c2f0474b6e","tarball":"https://registry.npmjs.org/http-proxy-response-rewrite/-/http-proxy-response-rewrite-0.0.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDSHdOaSDmgEHV075iciE5aJ8MMSbnz066RMR/p+OypdQIhALhRC8BcLOMSc7t2Bj8u/m9Po8oR8xU1Su2a91yFhJVS"}]},"maintainers":[{"name":"sklechko","email":"sasko_dh@hotmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/http-proxy-response-rewrite-0.0.1.tgz_1508244557234_0.4101752950809896"}}},"readme":"# http-proxy-response-rewrite [![Build Status](https://travis-ci.org/saskodh/http-proxy-response-rewrite.svg?branch=master)](https://travis-ci.org/saskodh/http-proxy-response-rewrite)\r\nRewrite the response body from [http-proxy](https://github.com/nodejitsu/node-http-proxy).\r\n\r\n## Installation\r\n\r\n```  \r\nnpm install http-proxy-response-rewrite\r\n```\r\n\r\n## Motivation\r\n  When using [http-proxy](https://github.com/nodejitsu/node-http-proxy) sometimes you will need to modify the response body. While the response object is available and can be easily modified, the response body will usually be compressed. This library will take care of the necessary (de)compressing and leave to you only the modification concerns.\r\n  So before using this repository, confirm your server compression format, currently only supports **gzip**„ÄÅ**deflate** and **uncompressed**.\r\n  If you need other compression formats, please create a new Issue, and I will try to achieve it as much as possible.\r\n\r\n## Use Cases\r\n\r\n#### Simulation server using gzip compression\r\n\r\n```\r\nvar zlib = require('zlib');\r\nvar http = require('http');\r\nvar httpProxy = require('http-proxy');\r\nvar modifyResponse = require('../');\r\n\r\n// Create a proxy server\r\nvar proxy = httpProxy.createProxyServer({\r\n    target: 'http://localhost:5001'\r\n});\r\n\r\n// Listen for the `proxyRes` event on `proxy`.\r\nproxy.on('proxyRes', function (proxyRes, req, res) {\r\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\r\n        if (body) {\r\n            // modify some information\r\n            var modifiedBody = JSON.parse(body);\r\n            modifiedBody.age = 2;\r\n            delete modifiedBody.version;\r\n            return JSON.stringify(modifiedBody);\r\n        }\r\n        return body;\r\n    });\r\n});\r\n\r\n// Create your server and then proxies the request\r\nvar server = http.createServer(function (req, res) {\r\n    proxy.web(req, res);\r\n}).listen(5000);\r\n\r\n// Create your target server\r\nvar targetServer = http.createServer(function (req, res) {\r\n\r\n    // Create gzipped content\r\n    var gzip = zlib.Gzip();\r\n    var _write = res.write;\r\n    var _end = res.end;\r\n\r\n    gzip.on('data', function (buf) {\r\n        _write.call(res, buf);\r\n    });\r\n    gzip.on('end', function () {\r\n        _end.call(res);\r\n    });\r\n\r\n    res.write = function (data) {\r\n        gzip.write(data);\r\n    };\r\n    res.end = function () {\r\n        gzip.end();\r\n    };\r\n\r\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'gzip'});\r\n    res.write(JSON.stringify({name: 'http-proxy-json', age: 1, version: '1.0.0'}));\r\n    res.end();\r\n}).listen(5001);\r\n```\r\n\r\n#### Simulation server using deflate compression\r\n\r\n```\r\nvar zlib = require('zlib');\r\nvar http = require('http');\r\nvar httpProxy = require('http-proxy');\r\nvar modifyResponse = require('../');\r\n\r\n// Create a proxy server\r\nvar proxy = httpProxy.createProxyServer({\r\n    target: 'http://localhost:5001'\r\n});\r\n\r\n// Listen for the `proxyRes` event on `proxy`.\r\nproxy.on('proxyRes', function (proxyRes, req, res) {\r\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\r\n        if (body) {\r\n            // modify some information\r\n            var modifiedBody = JSON.parse(body);\r\n            modifiedBody.age = 2;\r\n            delete modifiedBody.version;\r\n            return JSON.stringify(modifiedBody);\r\n        }\r\n        return body;\r\n    });\r\n});\r\n\r\n// Create your server and then proxies the request\r\nvar server = http.createServer(function (req, res) {\r\n    proxy.web(req, res);\r\n}).listen(5000);\r\n\r\n// Create your target server\r\nvar targetServer = http.createServer(function (req, res) {\r\n\r\n    // Create deflated content\r\n    var deflate = zlib.Deflate();\r\n    var _write = res.write;\r\n    var _end = res.end;\r\n\r\n    deflate.on('data', function (buf) {\r\n        _write.call(res, buf);\r\n    });\r\n    deflate.on('end', function () {\r\n        _end.call(res);\r\n    });\r\n\r\n    res.write = function (data) {\r\n        deflate.write(data);\r\n    };\r\n    res.end = function () {\r\n        deflate.end();\r\n    };\r\n\r\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\r\n    res.write(JSON.stringify({name: 'http-proxy-json', age: 1, version: '1.0.0'}));\r\n    res.end();\r\n}).listen(5001);\r\n```\r\n\r\n#### Server does not enable compression\r\n\r\n```\r\nvar http = require('http');\r\nvar httpProxy = require('http-proxy');\r\nvar modifyResponse = require('../');\r\n\r\n// Create a proxy server\r\nvar proxy = httpProxy.createProxyServer({\r\n    target: 'http://localhost:5001'\r\n});\r\n\r\n// Listen for the `proxyRes` event on `proxy`.\r\nproxy.on('proxyRes', function (proxyRes, req, res) {\r\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\r\n        if (body) {\r\n            // modify some information\r\n            var modifiedBody = JSON.parse(body);\r\n            modifiedBody.age = 2;\r\n            delete modifiedBody.version;\r\n            return JSON.stringify(modifiedBody);\r\n        }\r\n        return body;\r\n    });\r\n});\r\n\r\n// Create your server and then proxies the request\r\nvar server = http.createServer(function (req, res) {\r\n    proxy.web(req, res);\r\n}).listen(5000);\r\n\r\n// Create your target server\r\nvar targetServer = http.createServer(function (req, res) {\r\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\r\n    res.write(JSON.stringify({name: 'http-proxy-json', age: 1, version: '1.0.0'}));\r\n    res.end();\r\n}).listen(5001);\r\n```\r\n\r\n## Tests\r\n\r\n  To run the test suite, first install the dependencies, then run `npm test`:\r\n\r\n```bash\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\n## License\r\n\r\n  [MIT](http://opensource.org/licenses/MIT)","maintainers":[{"name":"sklechko","email":"sasko_dh@hotmail.com"}],"time":{"modified":"2022-05-05T08:09:02.742Z","created":"2017-10-17T12:49:18.081Z","0.0.1":"2017-10-17T12:49:18.081Z"},"homepage":"https://github.com/saskodh/http-proxy-response-rewrite#readme","keywords":["http-proxy","streaming","json"],"repository":{"type":"git","url":"git+https://github.com/saskodh/http-proxy-response-rewrite.git"},"bugs":{"url":"https://github.com/saskodh/http-proxy-response-rewrite/issues"},"license":"MIT","readmeFilename":"README.md"}
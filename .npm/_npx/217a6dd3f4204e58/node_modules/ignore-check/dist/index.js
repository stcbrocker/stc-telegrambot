/**
 * 1. read cli args
 * 2. check for gitignore (find-up)
 * 3. if gitignore doesn't exist then create it (unless --skip-create)
 * 4. if exists, then check if it includes patterns
 * 5. if includes patterns then exit (unless --force-with-comment)
 * 6. add the gitignore patterns (with/if --comment)
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { readFileSync, writeFileSync } from 'fs';
import findUp from 'find-up';
import meow from 'meow';
var cli = meow("\n     Usage\n       $ ignore-check -p <pattern>\n\n     Options\n       -p, --pattern=<gitignore pattern entry> (multiple) The patterns that need to present in the .gitignore\n       -d, --cwd=<directory>  Working directory, if not set, it will automatically try to find .gitignore files in parent directories recursively.\n       -c, --comment=<comment> The comment you want surrounding the added lines.\n       -f, --force Forces the creationg of a .gitignore in the current directory if one does not   exist already or cannot be found while checking parent directories.\n       -s, --silent Silences all logs.\n       --dry-run Does not change any files, just outputs logs.\n\n     Example\n       $ npx ignore-check -p '**.data.json' -p dist -p '**.ignore.**'  --comment 'managed by open-wa'\n ", {
    importMeta: import.meta,
    flags: {
        cwd: {
            type: 'string',
            alias: 'd',
        },
        comment: {
            type: 'string',
            alias: 'c',
        },
        dryRun: {
            type: 'boolean',
            default: false
        },
        force: {
            type: 'boolean',
            alias: 'f',
            default: false
        },
        silent: {
            type: 'boolean',
            alias: 's',
            default: false
        },
        pattern: {
            type: 'string',
            isMultiple: true,
            isRequired: true,
            alias: 'p',
        }
    }
});
export var start = function () { return __awaiter(void 0, void 0, void 0, function () {
    var log, patterns, filePath, contents, rawPatterns_1, missingPatterns, toWrite;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                log = function (s) { return cli.flags.silent ? {} : console.log("\n***.GITIGNORE CHECK***\n\n" + s + "\n\n***\n"); };
                if (process.env["SKIP_GITIGNORE_CHECK"]) {
                    log('Skipping .gitignore check. "SKIP_GITIGNORE_CHECK" environment variable was found.');
                    return [2 /*return*/];
                }
                if (cli.flags.pattern.length === 0) {
                    console.error('Specify at least one pattern');
                    process.exit(0);
                }
                patterns = cli.flags.pattern;
                filePath = findUp.sync('.gitignore');
                if (!(!filePath && cli.flags.force)) return [3 /*break*/, 2];
                log(".gitignore not found. Forcing creation at ./.gitignore");
                filePath = './.gitignore';
                return [4 /*yield*/, writeFileSync(filePath, '')];
            case 1:
                _b.sent();
                _b.label = 2;
            case 2:
                if (!filePath) return [3 /*break*/, 8];
                return [4 /*yield*/, readFileSync(filePath)];
            case 3:
                contents = (_b.sent()).toString();
                rawPatterns_1 = contents
                    .trim()
                    .split(/\r?\n/);
                missingPatterns = patterns.filter(function (pattern) { return !rawPatterns_1.includes(pattern); });
                if (!(missingPatterns.length > 0)) return [3 /*break*/, 6];
                toWrite = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], rawPatterns_1), [
                    cli.flags.comment ? "\n# " + cli.flags.comment : null
                ]), missingPatterns), [
                    cli.flags.comment ? "# end " + cli.flags.comment : null,
                ]).filter(function (x) { return x; })
                    .join('\n')
                    .trim() + "\n";
                if (!!((_a = cli === null || cli === void 0 ? void 0 : cli.flags) === null || _a === void 0 ? void 0 : _a.dryRun)) return [3 /*break*/, 5];
                return [4 /*yield*/, writeFileSync(filePath, toWrite)];
            case 4:
                _b.sent();
                _b.label = 5;
            case 5:
                log("Successfully added missing patterns to .gitignore (" + filePath + "): \n\t- " + missingPatterns.join('\n\t- '));
                return [3 /*break*/, 7];
            case 6:
                log("Patterns (" + patterns.join(', ') + ") already present in .gitignore (" + filePath + ")");
                _b.label = 7;
            case 7:
                process.exit(0);
                return [3 /*break*/, 9];
            case 8:
                log(".gitignore not found. Skipping ignore-check...");
                process.exit(0);
                _b.label = 9;
            case 9: return [2 /*return*/];
        }
    });
}); };
// start()
